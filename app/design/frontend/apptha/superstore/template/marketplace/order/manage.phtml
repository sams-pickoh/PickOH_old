<?php
/**
 * Apptha
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the EULA
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.apptha.com/LICENSE.txt
 *
 * ==============================================================
 *                 MAGENTO EDITION USAGE NOTICE
 * ==============================================================
 * This package designed for Magento COMMUNITY edition
 * Apptha does not guarantee correct work of this extension
 * on any other Magento edition except Magento COMMUNITY edition.
 * Apptha does not provide extension support in case of
 * incorrect edition usage.
 * ==============================================================
 *
 * @category    Apptha
 * @package     Apptha_Marketplace
 * @version     1.9.1
 * @author      Apptha Team <developers@contus.in>
 * @copyright   Copyright (c) 2016 Apptha. (http://www.apptha.com)
 * @license     http://www.apptha.com/LICENSE.txt
 * 
 */
?>
<script type="text/javascript">
    document.observe("dom:loaded", function() {
        var selected = document.getElementById("select_filter");
        var selectedValue = selected.options[selected.selectedIndex].value;
        console.log(selectedValue);
        if (selectedValue !== 'custom') {
            // initially hide all containers for tab content  
            $$('#date_from').invoke('hide');
            $$('#date_to').invoke('hide');
        }
    });
</script>
<?php
$from_display = $to_display = $data = $status = $select_filter = '';
$data = $this->getRequest()->getPost();
if (isset($data['status']) || isset($data['select_filter']) || isset($data['date_from']) || isset($data['date_to'])) {
    $status = $data['status'];
    $select_filter = $data['select_filter'];
    $from_date = $data['date_from'];
    $to_date = $data['date_to'];
}
switch ($select_filter) {
    case "today":
        /**
         * Today interval.
         */
        $start_day = strtotime("-1 today midnight");
        $from_display = date("Y-m-d", $start_day);
        $to_display = date("Y-m-d", $start_day);
        break;
    case "yesterday":
    	/**
    	 * Yesterday interval.
    	 */
        $start_day = strtotime("-1 yesterday midnight");
        $from_display = date("Y-m-d", $start_day);
        $to_display = date("Y-m-d", $start_day);
        break;
    case "lastweek":
    	/**
    	 * Last week interval.
    	 */
        $to = date('d-m-Y');
        $to_day = date('l', strtotime($t));
        /**
         * if today is monday, take last monday
         */
        if ($to_day == 'Monday') {
            $start_day = strtotime("-1 monday midnight");
            $end_day = strtotime("yesterday");
        } else {
            $start_day = strtotime("-2 monday midnight");
            $end_day = strtotime("-1 sunday midnight");
        }
        $from = date("Y-m-d", $start_day);
        $to = date("Y-m-d", $end_day);
        $to = date('Y-m-d', strtotime($to . ' + 1 day'));
        $from_display = $from;
        $to_display = date("Y-m-d", $end_day);
        break;
    case "lastmonth":
    	/**
    	 * last month interval
    	 */
        $from = date('Y-m-01', strtotime('last month'));
        $to = date('Y-m-t', strtotime('last month'));
        $to = date('Y-m-d', strtotime($to . ' + 1 day'));
        $from_display = $from;
        $to_display = date('Y-m-t', strtotime('last month'));
        break;
    case "custom":
    	/**
    	 * last custom interval.
    	 */
        $from = date('Y-m-d', strtotime($data['date_from']));
        $to = date('Y-m-d', strtotime($data['date_to'] . ' + 1 day'));
        $from_display = $from;
        $to_display = date('Y-m-d', strtotime($data['date_to']));
        break;
}
?>
<div class="account-login" id="market_place_manage_products_order">
    <div class="page-title sellers_store">
        <h1><?php echo $this->__('Orders') ?></h1>
        <div class="top_amount">
            <span class="right_space">
            	<?php 
            	/**
            	 * Display total amount received.
            	 */
            	?>
                <?php echo $this->__('Total Amount Received') ?> : <b><?php echo Mage::helper('marketplace/marketplace')->getAmountReceived(); ?></b>
            </span>
            <span>
             	<?php 
             	/**
             	 * Display pending amount.
             	 */
             	?>
                <?php echo $this->__('Amount Pending') ?> :  <b><?php echo Mage::helper('marketplace/marketplace')->getAmountRemaining(); ?></b>
            </span>
        </div> 
    </div>    
    <div class="clear"></div>
    <?php 
    /**
     * Dropdown for selcect the range.
     */
    ?>
    <form name="orders" method="post" action="">
        <div class="mp_sellers_order" style="display: none;">         
            <select name="select_filter" id="select_filter" onchange="selectFilter();">
                <option name="" value=""><?php echo $this->__('Select a Range'); ?></option>
                <option name="custom" value="custom" <?php if ($select_filter == 'custom') { ?> selected="selected" <?php } ?>><?php echo $this->__('Custom'); ?></option>
                <option name="today" value="today"  <?php if ($select_filter == 'today') { ?> selected="selected" <?php } ?>><?php echo $this->__('Today'); ?></option>
                <option name="yesterday" value="yesterday"  <?php if ($select_filter == 'yesterday') { ?> selected="selected" <?php } ?>><?php echo $this->__('Yesterday'); ?></option>
                <option name="lastweek" value="lastweek"  <?php if ($select_filter == 'lastweek') { ?> selected="selected" <?php } ?>><?php echo $this->__('Last Week'); ?></option>
                <option name="lastmonth" value="lastmonth"  <?php if ($select_filter == 'lastmonth') { ?> selected="selected" <?php } ?>><?php echo $this->__('Last Month'); ?></option>
            </select>
            <input type="text" placeholder="mm/dd/yyyy" class="input-text required-entry" name="date_from" id="date_from" value="<?php if ($select_filter == 'custom') {
                    echo $from_date;
                } ?>" />
            <input type="text" placeholder="mm/dd/yyyy" class="input-text required-entry" name="date_to" id="date_to" value="<?php if ($select_filter == 'custom') {
                    echo $to_date;
                } ?>" />
            <button type="submit" class="button"  title="<?php echo $this->__('Submit') ?>" name="filter_submit" id="multi_submit" ><span><span><?php echo $this->__('Submit') ?></span></span></button>
<?php if ($from_display != '' && $to_display != '' && $select_filter != 'custom') { ?>
                <p> <b><?php echo $this->__('Start date:'); ?></b>&nbsp; <?php echo $from_display; ?>
                    <b><?php echo $this->__('End date:'); ?></b>&nbsp; <?php echo $to_display; ?> </p>
        <?php } ?>
        </div>
        <div class="clear"></div>
<?php echo $this->getMessagesBlock()->getGroupedHtml() ?>
<?php $_orders = $this->getCollection(); ?> 

        <table class="data-table" id="my-product-table" width="100%">
            <col width="1" />
            <col width="1" />
            <col />
            <col width="1" />
            <col width="1" />
            <col width="1" />
            <thead>
                <tr>
                    <th class="text_left"><?php echo $this->__('Order #') ?></th>
                    <th><?php echo $this->__('Order Date') ?></th>
                    <th><?php echo $this->__('SHIP TO') ?></th>  
                    <th><?php echo $this->__('PRODUCT DETAILS') ?></th>      
                    <th><?php echo $this->__('TOTAL') ?></th>
                    <th><?php echo $this->__('PRICE + SHIPMENT') ?></th>              
                    <th><?php echo $this->__('STATUS') ?></th>                   
                    <th class="no-border-right"><?php echo $this->__('ACTION') ?></th>
                </tr>
                <tr class="mp_filter_function">

                </tr>
            </thead>
            <tbody>
                <?php
                if ($_orders->getSize()):
                    foreach ($_orders as $order):
                        $getOrderId = $order->getOrderId();
                        $getSellerId = $order->getSellerId();
                        $orderdedQuantity = $order->getProductQty();
                        $orderDetails = Mage::getModel('sales/order')->load($getOrderId);
                        $isVirtual=$orderDetails->getIsVirtual();
                        if($isVirtual==0){
                            $shippingId = $orderDetails->getShippingAddress()->getCountry();
                        }
                        else{
                            $shippingId = $orderDetails->getBillingAddress()->getCountry();
                        }
                        $shipMehtod = $orderDetails->getShippingMethod();
                        $checkSellerOrProductShipping = Mage::getStoreConfigFlag('marketplace/shipping/shippingcost');
                        $sellerProfile = Mage::getModel ( 'marketplace/sellerprofile' )->load ( Mage::getSingleton('customer/session')->getId(), 'seller_id' );
                        $sellerDefaultCountry = $sellerProfile['country'];
                        $nationalShippingPrice = $sellerProfile['national_shipping_cost'];
                        $internationalShippingPrice = $sellerProfile['international_shipping_cost'];
                        $getProductDetails = $this->getProductDetails($getOrderId,$getSellerId);
                        $customCount = count($getProductDetails);
                        $getSellerShippingDetails = $this->getSellerShippingDetails($getOrderId,$getSellerId);
                        $orderPrdouctIds = Mage::helper('marketplace/vieworder')->getOrderProductIds(Mage::getSingleton('customer/session')->getId(),$getOrderId);
                        
                        /**
                         * Getting canceled product ids
                         */
                        $cancelOrderItemProductIds = Mage::helper('marketplace/vieworder')->cancelOrderItemProductIds(Mage::getSingleton('customer/session')->getId(),$getOrderId);
                        $orderAndCancelDiff = array_diff($orderPrdouctIds,$cancelOrderItemProductIds);
                        $orderAndCancelDiffCount = count($orderAndCancelDiff);
                        
                        $checkOrderStatusArr = array();
                        foreach($orderDetails->getAllItems() as $item){                         
                        	$itemProductId = $item->getProductId();
                        	$orderItem = $item;
                        	if(in_array($itemProductId,$orderPrdouctIds) && !in_array($itemProductId,$cancelOrderItemProductIds)){
                            $checkOrderStatusArr[] = Mage::helper('marketplace/vieworder')->checkOrderStatusForSeller($orderItem); 
                        	}
                            }                        
                        ?>
                        <tr>
                        <td class="text_left"><?php echo $order->getIncrementId(); ?></td>
                        <td><?php $date = $orderDetails->getCreatedAtDate();
                        echo $new_date = date('m/j/Y', strtotime($date)); ?></td>
                       <td><?php  
                        if($orderDetails->getShippingAddress()){                
                        echo $orderDetails->getShippingAddress()->getName();
                        }
                        ?></td> 
                        <td>
                        <?php 
                        echo $getProductDetails;
                        ?>
                        </td>                          
                        
                         <?php 
                         if($checkSellerOrProductShipping != 1 && $shipMehtod =='apptha_apptha'){
                         if ($sellerDefaultCountry == $shippingId && $nationalShippingPrice != '')
                    { ?>
                        
                        
                        <td><?php 
                        $orderCurrencySymbol = Mage::helper('marketplace')->orderCurrencySymbol($order->getOrderId());
                        
                        $shippingAmount = $this->getOrderShipment($getOrderId,$getSellerId);//$commissionCollection->getSellerShippingAmount();
                        
                        $productPrice = $order->getSellerAmount()-$shippingAmount;
                        
                        $baseCurrencyCode = Mage::app()->getStore()->getBaseCurrencyCode();
                        if($orderCurrencySymbol == $baseCurrencyCode){
                        	$shippingAmount = number_format(round($shippingAmount, 2), 2);
                        }else{
                        	$orderCurrencyCode = Mage::helper('marketplace')->orderCurrencyCode($order->getOrderId());
                        	 
                        	$currencyRates = Mage::getModel('directory/currency')
                        	->getCurrencyRates($baseCurrencyCode, array($orderCurrencyCode));
                        	$shippingAmount = number_format(round(($currencyRates[$orderCurrencyCode] * $shippingAmount), 2), 2);
                        }
                        $nationalShippingPrice = $orderdedQuantity * $nationalShippingPrice;
                        $nationalShippingPrice = $nationalShippingPrice * $getSellerShippingDetails;
                        echo $orderCurrencySymbol.number_format(round(($productPrice + $nationalShippingPrice + str_replace(',', '', $shippingAmount)), 2), 2); ?></td>
                        <td><?php 
                        $shippingAmount = $shippingAmount +  $nationalShippingPrice;
                        echo $orderCurrencySymbol.number_format(round($productPrice, 2), 2).'+'.$orderCurrencySymbol.$shippingAmount; ?></td>
                        
                        
                        <?php }
                    else if ($sellerDefaultCountry != $shippingId && $internationalShippingPrice != '')
                    {?>
                        
                        <td><?php 
                        $orderCurrencySymbol = Mage::helper('marketplace')->orderCurrencySymbol($order->getOrderId());
                        
                        $shippingAmount = $this->getOrderShipment($getOrderId,$getSellerId);//$commissionCollection->getSellerShippingAmount();
                        
                        $productPrice = $order->getSellerAmount()-$shippingAmount;
                        
                        $baseCurrencyCode = Mage::app()->getStore()->getBaseCurrencyCode();
                        if($orderCurrencySymbol == $baseCurrencyCode){
                        	$shippingAmount = number_format(round($shippingAmount, 2), 2);
                        }else{
                        	$orderCurrencyCode = Mage::helper('marketplace')->orderCurrencyCode($order->getOrderId());
                        	 
                        	$currencyRates = Mage::getModel('directory/currency')
                        	->getCurrencyRates($baseCurrencyCode, array($orderCurrencyCode));
                        	$shippingAmount = number_format(round(($currencyRates[$orderCurrencyCode] * $shippingAmount), 2), 2);
                        }
                        $internationalShippingPrice = $orderdedQuantity * $internationalShippingPrice;
                        $internationalShippingPrice = $internationalShippingPrice * $getSellerShippingDetails;
                        echo $orderCurrencySymbol.number_format(round(($productPrice + $internationalShippingPrice + str_replace(',', '', $shippingAmount)), 2), 2); ?></td>
                        <td><?php 
                        $shippingAmount = $shippingAmount +  $internationalShippingPrice;
                        echo $orderCurrencySymbol.number_format(round($productPrice, 2), 2).'+'.$orderCurrencySymbol.$shippingAmount; ?></td>
                        
                        <?php  } else {?>
                        
                        
                        <td><?php 
                        $orderCurrencySymbol = Mage::helper('marketplace')->orderCurrencySymbol($order->getOrderId());
                        
                        $shippingAmount = $this->getOrderShipment($getOrderId,$getSellerId);//$commissionCollection->getSellerShippingAmount();
                        
                        $productPrice = $order->getSellerAmount()-$shippingAmount;
                        
                        $baseCurrencyCode = Mage::app()->getStore()->getBaseCurrencyCode();
                        if($orderCurrencySymbol == $baseCurrencyCode){
                        	$shippingAmount = number_format(round($shippingAmount, 2), 2);
                        }else{
                        	$orderCurrencyCode = Mage::helper('marketplace')->orderCurrencyCode($order->getOrderId());
                        	 
                        	$currencyRates = Mage::getModel('directory/currency')
                        	->getCurrencyRates($baseCurrencyCode, array($orderCurrencyCode));
                        	$shippingAmount = number_format(round(($currencyRates[$orderCurrencyCode] * $shippingAmount), 2), 2);
                        }
                        echo $orderCurrencySymbol.number_format(round(($productPrice + str_replace(',', '', $shippingAmount)), 2), 2); ?></td>
                        <td><?php 
                        
                        echo $orderCurrencySymbol.number_format(round($productPrice, 2), 2).'+'.$orderCurrencySymbol.$shippingAmount; ?></td>
                        <?php } } else {?>
                        
                        <td><?php 
                        $orderCurrencySymbol = Mage::helper('marketplace')->orderCurrencySymbol($order->getOrderId());
                        
                        $shippingAmount = $this->getOrderShipment($getOrderId,$getSellerId);//$commissionCollection->getSellerShippingAmount();
                        
                        $productPrice = $order->getSellerAmount()-$shippingAmount;
                        
                        $baseCurrencyCode = Mage::app()->getStore()->getBaseCurrencyCode();
                        if($orderCurrencySymbol == $baseCurrencyCode){
                        	$shippingAmount = number_format(round($shippingAmount, 2), 2);
                        }else{
                        	$orderCurrencyCode = Mage::helper('marketplace')->orderCurrencyCode($order->getOrderId());
                        	 
                        	$currencyRates = Mage::getModel('directory/currency')
                        	->getCurrencyRates($baseCurrencyCode, array($orderCurrencyCode));
                        	$shippingAmount = number_format(round(($currencyRates[$orderCurrencyCode] * $shippingAmount), 2), 2);
                        }
                        echo $orderCurrencySymbol.number_format(round(($productPrice + str_replace(',', '', $shippingAmount)), 2), 2); ?></td>
                        <td><?php 
                        
                        echo $orderCurrencySymbol.number_format(round($productPrice, 2), 2).'+'.$orderCurrencySymbol.$shippingAmount; ?></td>
                        <?php }?>
                        <td><span><?php  echo $order->getItemOrderStatus();
                        ?></span></td>         
                        <td><a href="<?php echo Mage::getUrl('marketplace/order/vieworder', array('orderid' => $getOrderId)); ?>"><?php echo $this->__('View'); ?></a></td>
                        </tr>
        <?php endforeach; ?>
                </tbody>
<?php else: ?>
                <tfoot><tr><td colspan="9" class="a-center no_product_content"><?php echo $this->__('You have no Order.'); ?></td></tr></tfoot>
<?php endif ?>
        </table>
    </form> 
<?php echo $this->getPagerHtml(); ?>
    <script type="text/javascript">
        var dataForm = new VarienForm('orders');
    </script>
    <script type="text/javascript">
        decorateTable('my-product-table');
        // <![CDATA[
        Calendar.setup({
            inputField: 'date_from',
            ifFormat: '%m/%e/%y',
            button: 'date_from',
            align: 'Bl',
            singleClick: true
        });

        Calendar.setup({
            inputField: 'date_to',
            ifFormat: '%m/%e/%y',
            button: 'date_to',
            align: 'Bl',
            singleClick: true
        });
// ]]>
        function selectFilter() {
            var filter = $('select_filter')[$('select_filter').selectedIndex].value;
            if (filter === 'custom') {
                $$('#date_from').invoke('show');
                $$('#date_to').invoke('show');
            }
            else {
                $$('#date_from').invoke('hide');
                $$('#date_to').invoke('hide');
            }
        }
    </script>
</div>